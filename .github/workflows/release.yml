# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: push
    
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    # - name: Build
    #   run: echo ${{ github.sha }} > Release.txt
      
    - name: Release
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag'
      with:
        files: target/*.jar

      # 3. 配置SSH密钥
    - name: Setup SSH Key
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          # 验证密钥格式（可选）
          ssh-keygen -y -f ~/.ssh/deploy_key > ~/.ssh/deploy_key.pub
          echo "SSH Key Fingerprint:"
          ssh-keygen -lf ~/.ssh/deploy_key.pub
    # 4. 测试SSH连接
    - name: Test SSH Connection
      run: |
            ssh -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              root@${{ secrets.HOST }} \
              "echo 'SSH连接成功！'"
              
    - name: deploy
      run: |
            scp -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              target/*.jar \
              root@${{ secrets.HOST }}:/usr/local/test/
    
    # - name: deploy
    #   uses: easingthemes/ssh-deploy@v2.1.1
    #   env:
    #       # 本地.ssh文件下的私钥id_rsa，存在secrets的PRIVATE_KEY中
    #       SSH_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
    #       # 复制操作的参数。"-avzr --delete"意味部署时清空服务器目标目录下的文件
    #       ARGS: "-avzr --delete" 
    #       # 源目录，相对于$GITHUB_WORKSPACE根目录的路径
    #       SOURCE: "target/*.jar"
    #       # 服务器域名/IP
    #       REMOTE_HOST: ${{ secrets.HOST }}
    #       # 服务器默认用户名为root
    #       REMOTE_USER: "root"
    #       # 目标目录
    #       TARGET: '/usr/local/test/'
    # - name: Create Release
    #   id: create_release
    #   uses: softprops/action-gh-release@v2
    #   with:
    #     tag_name: v${{ env.VERSION }}
    #     name: Release v${{ env.VERSION }}
    #     files: target/*.jar
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
        
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
    #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
  
